#include<stdio.h>
#include<stdlib.h>

struct node {
    int data;
    struct node* link;
};

struct node* insertion_beg(struct node* head);
void insertion_random(struct node* head, int pos);
void insertion_end(struct node* head);
void display(struct node* head);

int main() {
    struct node* head = (struct node*)malloc(sizeof(struct node));
    head->data = 10;
    head->link = NULL;

    struct node* current = (struct node*)malloc(sizeof(struct node));
    current->data = 20;
    current->link = NULL;
    head->link = current;

    current = (struct node*)malloc(sizeof(struct node));
    current->data = 30;
    current->link = NULL;
    head->link->link = current;

    printf("Before insertion:\n");
    display(head);

    printf("\nAfter insertion at the beginning:\n");
    head = insertion_beg(head);
    display(head);

    printf("\nAfter insertion at a random position:\n");
    insertion_random(head, 2);
    display(head);

    printf("\nAfter insertion at the end:\n");
    insertion_end(head);
    display(head);

    return 0;
}

void display(struct node* head) {
    struct node* temp = head;
    while (temp != NULL) {
        printf("%d->", temp->data);
        temp = temp->link;
    }
    printf("NULL\n");
}

struct node* insertion_beg(struct node* head) {
    struct node* new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = 40;
    new_node->link = head;
    head = new_node;
    return head;
}

void insertion_random(struct node* head, int pos) {
    struct node* temp = head;
    struct node* prevnode = NULL;
    struct node* new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = 50; // Change the data value as needed

    while (pos > 1) {
        prevnode = temp;
        temp = temp->link;
        pos--;
    }

    new_node->link = temp;
    prevnode->link = new_node;
}

void insertion_end(struct node* head) {
    struct node* temp = head;
    struct node* new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = 60; // Change the data value as needed
    new_node->link = NULL;

    while (temp->link != NULL) {
        temp = temp->link;
    }

    temp->link = new_node;
}
