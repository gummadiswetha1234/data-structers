#include<stdio.h>
#include<stdlib.h>

struct node {
    int data;
    struct node* prev;
    struct node* next;
};

struct node* insertion_beg(struct node* head);
void insertion_random(struct node* head, int pos);
void insertion_end(struct node* head);
void display(struct node* head);

int main() {
    struct node* head = (struct node*)malloc(sizeof(struct node));
    head->data = 10;
    head->prev = NULL;
    head->next = NULL;

    struct node* current = (struct node*)malloc(sizeof(struct node));
    current->data = 20;
    current->prev = head;
    current->next = NULL;
    head->next = current;

    current = (struct node*)malloc(sizeof(struct node));
    current->data = 30;
    current->prev = head->next;
    current->next = NULL;
    head->next->next = current;

    printf("Before insertion:\n");
    display(head);

    printf("\nAfter insertion at the beginning:\n");
    head = insertion_beg(head);
    display(head);

    printf("\nAfter insertion at a random position:\n");
    insertion_random(head, 2);
    display(head);

    printf("\nAfter insertion at the end:\n");
    insertion_end(head);
    display(head);

    return 0;
}

void display(struct node* head) {
    struct node* temp = head;
    printf("NULL<=>");
    while (temp != NULL) {
        printf("%d<=>", temp->data);
        temp = temp->next;
    }
    printf("NULL\n");
}

struct node* insertion_beg(struct node* head) {
    struct node* new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = 40;
    new_node->prev = NULL;
    new_node->next = head;
    
    if (head != NULL) {
        head->prev = new_node;
    }

    head = new_node;
    return head;
}

void insertion_random(struct node* head, int pos) {
    struct node* temp = head;
    struct node* new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = 50;
    new_node->prev = NULL;
    new_node->next = NULL;

    while (pos != 2 && temp != NULL) {
        temp = temp->next;
        pos--;
    }

    if (temp == NULL) {
        printf("Invalid position for insertion.\n");
        free(new_node);
        return;
    }

    new_node->next = temp->next;
    new_node->prev = temp;
    
    if (temp->next != NULL) {
        temp->next->prev = new_node;
    }

    temp->next = new_node;
}

void insertion_end(struct node* head) {
    struct node* temp = head;
    struct node* new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = 60;
    new_node->prev = NULL;
    new_node->next = NULL;

    while (temp->next != NULL) {
        temp = temp->next;
    }

    temp->next = new_node;
    new_node->prev = temp;
}
